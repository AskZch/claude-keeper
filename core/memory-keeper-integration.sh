#!/bin/bash
# MEMORY-KEEPER INTEGRATION - Bridge between hooks and MCP memory system
# Provides functions for saving/loading critical state

INTEGRATION_LOG="/home/zch/.claude/hooks/memory-integration.log"
PROJECT_ROOT="/home/zch/devel/SpokenBlade"
MEMORY_SESSION="a73e16e2-8512-4af7-9970-5c1047858b5c"

# Logging
log_memory() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] MEMORY: $1" >> "$INTEGRATION_LOG"
}

# Save current project state to memory-keeper
# Since we can't directly call MCP from bash, we'll create files that Claude can read
save_project_state() {
    log_memory "Saving project state"

    # Create a memory state file that Claude can read and sync to memory-keeper
    local memory_file="$PROJECT_ROOT/.devdata/memory-keeper-sync.md"

    cat > "$memory_file" << EOF
# Memory-Keeper Sync - $(date)

## Current Session State
**Session ID**: $MEMORY_SESSION
**Project**: SpokenBlade
**Branch**: $(cd "$PROJECT_ROOT" && git branch --show-current 2>/dev/null || echo "unknown")
**Context**: Auto-saved by hooks at $(date '+%Y-%m-%d %H:%M:%S')

## Critical Status
$([ -f "$PROJECT_ROOT/.devdata/current_state.md" ] && head -20 "$PROJECT_ROOT/.devdata/current_state.md" || echo "No current state file")

## Active TODOs
$([ -f "$PROJECT_ROOT/.plan/TODO-ACTIVE.md" ] && grep -E "pending|in_progress" "$PROJECT_ROOT/.plan/TODO-ACTIVE.md" 2>/dev/null | head -5 || echo "No active TODOs found")

## Last Commands
$(tail -10 "$INTEGRATION_LOG" 2>/dev/null || echo "No recent commands")

## Sync Instructions for Claude
**Action Required**: Use mcp__memory-keeper__context_save to sync this data to session $MEMORY_SESSION
**Priority**: $([ -f "/tmp/spokenblade-context-critical" ] && echo "HIGH - Context near limit" || echo "NORMAL - Routine save")
EOF

    log_memory "Project state saved to $memory_file"
    echo "ðŸ’¾ Project state prepared for memory-keeper sync"
}

# Prepare for auto-compact (enhanced version)
prepare_auto_compact() {
    log_memory "Preparing for auto-compact sequence"

    # Mark this as a critical save
    touch "/tmp/spokenblade-context-critical"

    # Save enhanced project state
    save_project_state

    # Create a handoff document
    local handoff_file="$PROJECT_ROOT/AUTO-HANDOFF-$(date +%Y%m%d-%H%M%S).md"

    cat > "$handoff_file" << EOF
# Auto-Generated Handoff - $(date)

## CRITICAL: Context Compaction Triggered

**Memory-Keeper Session**: $MEMORY_SESSION
**Channel**: urgent-fixes
**Trigger**: Automated at $(date '+%Y-%m-%d %H:%M:%S')

## Next Session Instructions
1. FIRST ACTION: Query memory-keeper session $MEMORY_SESSION
2. READ: This handoff document and .devdata/current_state.md
3. CONTINUE: Incomplete work from TodoWrite tool

## System Status
- Server: $(pgrep -f "start_server.sh" > /dev/null && echo "Running" || echo "Stopped")
- Branch: $(cd "$PROJECT_ROOT" && git branch --show-current 2>/dev/null || echo "unknown")
- Last Activity: $(date '+%Y-%m-%d %H:%M:%S')

## Memory-Keeper Items to Check
- corrections-fixed-status
- vocabulary-corruption-status
- unfuck-plan-next-session
- critical-files-locations
- user-context-memory-problem

## Hook System Active
- Context health monitoring: âœ…
- Memory-keeper integration: âœ…
- Auto-compact triggers: âœ…
- Anti-idling enforcement: âœ…

---
**Generated by**: Hook orchestrator system
**For**: SpokenBlade project context preservation
EOF

    log_memory "Auto-handoff created at $handoff_file"
    echo "ðŸ“‹ Auto-handoff document created: $(basename $handoff_file)"
}

# Load previous session state (for session-start hook)
load_session_state() {
    log_memory "Loading previous session state"

    echo "ðŸ”„ LOADING SESSION STATE FROM MEMORY-KEEPER"
    echo ""
    echo "**Memory Session**: $MEMORY_SESSION"
    echo "**Channel**: urgent-fixes"
    echo ""

    # Show latest handoff document
    local latest_handoff=$(ls -t "$PROJECT_ROOT"/AUTO-HANDOFF-*.md "$PROJECT_ROOT"/SESSION-HANDOFF-*.md 2>/dev/null | head -1)
    if [ -f "$latest_handoff" ]; then
        echo "ðŸ“‹ **Latest Handoff**: $(basename "$latest_handoff")"
        echo "**Created**: $(stat -c %y "$latest_handoff" | cut -d' ' -f1-2)"
        echo ""
    fi

    # Show critical reminders
    echo "ðŸš¨ **Critical Reminders**:"
    echo "â€¢ Query memory-keeper session $MEMORY_SESSION immediately"
    echo "â€¢ Check .devdata/current_state.md for project status"
    echo "â€¢ Use test_admin_login.py for authentication (avoid password escaping)"
    echo "â€¢ Server should be running on port 8000"
    echo ""

    log_memory "Session state loading completed"
}

# Function dispatcher
case "${1:-help}" in
    "save")
        save_project_state
        ;;
    "prepare-compact")
        prepare_auto_compact
        ;;
    "load")
        load_session_state
        ;;
    "help"|*)
        echo "Memory-Keeper Integration Script"
        echo "Usage: $0 {save|prepare-compact|load}"
        echo ""
        echo "Commands:"
        echo "  save           - Save current project state for memory-keeper"
        echo "  prepare-compact - Prepare for context compaction"
        echo "  load           - Load previous session state"
        ;;
esac